# Use the latest 2.1 version of CircleCI pipeline process engine.
# Based on: https://circleci.com/blog/production-ready-dockerized-django/
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test:
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    docker:
      - image: cimg/python:3.9
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.

    steps:
      - checkout

      - restore_cache: # restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run
          key: deps1-{{ .Branch }}-{{ checksum "requirements-dev.txt" }}

      - run:
          name: Install application
          command: |
            python3 -m venv .venv
            . .venv/bin/activate
            pip install --upgrade pip setuptools wheel
            pip install --upgrade pip-tools
            sed -i '/^-e file:/d' requirements-dev.txt
            pip-sync requirements-dev.txt
            pip install -e .[dev]

      - save_cache: # special step to save dependency cache
          key: deps1-{{ .Branch }}-{{ checksum "requirements-dev.txt" }}
          paths:
            ".venv"

      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: |
            . .venv/bin/activate
            pytest tests

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: 
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
